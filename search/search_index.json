{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"About","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"ai/","text":"AI-Learning Machine_Learning exp1-Linear_Regression exp1-1 exp1-2 exp2-Logistic_Regression exp2-1 exp2-2 exp3-Neural_Network(fp) exp3-1 exp3-2 exp4-Neural_Network(bp) exp4-1 exp5-Bias_VS_Variance exp5-1 exp6-SVM exp6-1 exp6-2 exp6-3 exp6-4 exp7-K-means_And_PCA exp7-1 exp7-2 exp7-3 Deep_Learning Reference ladykaka007 \u7684\u6295\u7a3f\u89c6\u9891","title":"AI"},{"location":"ai/#ai-learning","text":"","title":"AI-Learning"},{"location":"ai/#machine_learning","text":"","title":"Machine_Learning"},{"location":"ai/#exp1-linear_regression","text":"","title":"exp1-Linear_Regression"},{"location":"ai/#exp1-1","text":"","title":"exp1-1"},{"location":"ai/#exp1-2","text":"","title":"exp1-2"},{"location":"ai/#exp2-logistic_regression","text":"","title":"exp2-Logistic_Regression"},{"location":"ai/#exp2-1","text":"","title":"exp2-1"},{"location":"ai/#exp2-2","text":"","title":"exp2-2"},{"location":"ai/#exp3-neural_networkfp","text":"","title":"exp3-Neural_Network(fp)"},{"location":"ai/#exp3-1","text":"","title":"exp3-1"},{"location":"ai/#exp3-2","text":"","title":"exp3-2"},{"location":"ai/#exp4-neural_networkbp","text":"","title":"exp4-Neural_Network(bp)"},{"location":"ai/#exp4-1","text":"","title":"exp4-1"},{"location":"ai/#exp5-bias_vs_variance","text":"","title":"exp5-Bias_VS_Variance"},{"location":"ai/#exp5-1","text":"","title":"exp5-1"},{"location":"ai/#exp6-svm","text":"","title":"exp6-SVM"},{"location":"ai/#exp6-1","text":"","title":"exp6-1"},{"location":"ai/#exp6-2","text":"","title":"exp6-2"},{"location":"ai/#exp6-3","text":"","title":"exp6-3"},{"location":"ai/#exp6-4","text":"","title":"exp6-4"},{"location":"ai/#exp7-k-means_and_pca","text":"","title":"exp7-K-means_And_PCA"},{"location":"ai/#exp7-1","text":"","title":"exp7-1"},{"location":"ai/#exp7-2","text":"","title":"exp7-2"},{"location":"ai/#exp7-3","text":"","title":"exp7-3"},{"location":"ai/#deep_learning","text":"","title":"Deep_Learning"},{"location":"ai/#reference","text":"ladykaka007 \u7684\u6295\u7a3f\u89c6\u9891","title":"Reference"},{"location":"algorithms/","text":"Algorithms Graph Algorithms Single-Source Shortest Paths Dijkstra's Algorithm We assume that \\(w(u, v) \\geq 0\\) for each edge \\((u, v)\\in E\\) DIJKSTRA. (G,w,s) 1 INITIALIZE-SINGLE-SOURCE(G,s) 2 S=\u2205 3 Q=G.V // Q: min-priority queue 4 while Q\u2260\u2205 5 u=D EXTRACT-MIN(Q) 6 S=S\u222a{u} 7 for each vertex v\u2208G.Adj[u] 8 RELAX(u,v,w) void dijkstra(vector<vector<pair<int, int>>> &graph, int src) { int n = graph.size(); vector<int> dist(n, INT_MAX); // Sorted by distance, the vertices with smaller distance are ranked first. priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq; // Store the vertices to be processed and their distance from the // source point pq.push({0, src}); dist[src] = 0; // O((V+E)logV) while (!pq.empty()) { int u = pq.top().second; pq.pop(); for (auto it : graph[u]) { int v = it.first; int weight = it.second; if (dist[v] > dist[u] + weight) { dist[v] = dist[u] + weight; pq.push({dist[v], v}); } } } for (int i = 0; i < n; ++i) { cout << i << \"\\t\" << dist[i] << endl; } } // Test Code #include <climits> // for INT_MAX #include <iostream> #include <queue> #include <utility> // for pair #include <vector> using namespace std; void dijkstra(vector<vector<pair<int, int>>> &graph, int src); int main() { // Adjacency table vector<vector<pair<int, int>>> graph = { {{1, 4}, {2, 3}}, {{2, 1}, {3, 2}}, {{3, 4}}, {}}; int src = 0; dijkstra(graph, src); return 0; } void dijkstra(vector<vector<pair<int, int>>> &graph, int src) { // ... } Reference [1] C. E. Leiserson, T. H. Cormen, R. L. Rivest, and C. Stein, \"Introduction to Algorithms, 3rd Edition,\" MIT Press, 2009.","title":"Algorithms"},{"location":"algorithms/#algorithms","text":"","title":"Algorithms"},{"location":"algorithms/#graph-algorithms","text":"","title":"Graph Algorithms"},{"location":"algorithms/#single-source-shortest-paths","text":"","title":"Single-Source Shortest Paths"},{"location":"algorithms/#dijkstras-algorithm","text":"We assume that \\(w(u, v) \\geq 0\\) for each edge \\((u, v)\\in E\\) DIJKSTRA. (G,w,s) 1 INITIALIZE-SINGLE-SOURCE(G,s) 2 S=\u2205 3 Q=G.V // Q: min-priority queue 4 while Q\u2260\u2205 5 u=D EXTRACT-MIN(Q) 6 S=S\u222a{u} 7 for each vertex v\u2208G.Adj[u] 8 RELAX(u,v,w) void dijkstra(vector<vector<pair<int, int>>> &graph, int src) { int n = graph.size(); vector<int> dist(n, INT_MAX); // Sorted by distance, the vertices with smaller distance are ranked first. priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq; // Store the vertices to be processed and their distance from the // source point pq.push({0, src}); dist[src] = 0; // O((V+E)logV) while (!pq.empty()) { int u = pq.top().second; pq.pop(); for (auto it : graph[u]) { int v = it.first; int weight = it.second; if (dist[v] > dist[u] + weight) { dist[v] = dist[u] + weight; pq.push({dist[v], v}); } } } for (int i = 0; i < n; ++i) { cout << i << \"\\t\" << dist[i] << endl; } } // Test Code #include <climits> // for INT_MAX #include <iostream> #include <queue> #include <utility> // for pair #include <vector> using namespace std; void dijkstra(vector<vector<pair<int, int>>> &graph, int src); int main() { // Adjacency table vector<vector<pair<int, int>>> graph = { {{1, 4}, {2, 3}}, {{2, 1}, {3, 2}}, {{3, 4}}, {}}; int src = 0; dijkstra(graph, src); return 0; } void dijkstra(vector<vector<pair<int, int>>> &graph, int src) { // ... }","title":"Dijkstra's Algorithm"},{"location":"algorithms/#reference","text":"[1] C. E. Leiserson, T. H. Cormen, R. L. Rivest, and C. Stein, \"Introduction to Algorithms, 3rd Edition,\" MIT Press, 2009.","title":"Reference"},{"location":"maths/","text":"Maths Integration \\[ \\lim_{n\\to\\infty}\\sum_{k=1}^n{\\dfrac{1}{n+k}} = \\lim_{n\\to\\infty}\\sum_{k=1}^n{\\dfrac{1}{1+\\frac{k}{n}}}=\\int_0^1{\\dfrac{1}{1+x}}dx=\\ln2. \\] Differential Equation \\(\\dfrac{dy}{dx}=f(x)g(y)\\) \\[ \\int{\\dfrac{dy}{g(y)}=\\int{f(x)dx}+C} \\] \\(\\dfrac{dy}{dx}=f(x,y)\\) \\[ \\begin{aligned} &\\text{let}\\ y = ux\\\\ f(x,y) &= f(x,ux)=\\varphi(u)\\\\ \\varphi(u) &= u+x\\dfrac{du}{dx}\\\\ \\int \\dfrac{du}{\\varphi(u)-u}&=\\int \\dfrac{dx}{x} + C=\\ln|x| + C\\\\ \\Phi(u)&=\\Phi(\\dfrac{y}{x}) = \\ln|x| + C\\\\ \\end{aligned} \\] \\(y'+p(x)y=q(x)\\) \\[ y = \\dfrac{\\displaystyle\\int e^{\\int p(x)dx} q(x)dx+C}{e^{\\int p(x)dx}} \\] \\(y'+p(x)y=q(x)y^n\\) \\[ \\begin{aligned} &y'y^{-n}+p(x)y^{1-n} = q(x)\\\\ \\text{let}\\ &z = y^{1-n},\\dfrac{dz}{dx}=(1-n)\\dfrac{dy}{dx}y^{-n}\\\\ &\\dfrac{1}{1-n}\\dfrac{dz}{dx}+p(x)z=q(x) \\end{aligned} \\]","title":"Maths"},{"location":"maths/#maths","text":"","title":"Maths"},{"location":"maths/#integration","text":"\\[ \\lim_{n\\to\\infty}\\sum_{k=1}^n{\\dfrac{1}{n+k}} = \\lim_{n\\to\\infty}\\sum_{k=1}^n{\\dfrac{1}{1+\\frac{k}{n}}}=\\int_0^1{\\dfrac{1}{1+x}}dx=\\ln2. \\]","title":"Integration"},{"location":"maths/#differential-equation","text":"\\(\\dfrac{dy}{dx}=f(x)g(y)\\) \\[ \\int{\\dfrac{dy}{g(y)}=\\int{f(x)dx}+C} \\] \\(\\dfrac{dy}{dx}=f(x,y)\\) \\[ \\begin{aligned} &\\text{let}\\ y = ux\\\\ f(x,y) &= f(x,ux)=\\varphi(u)\\\\ \\varphi(u) &= u+x\\dfrac{du}{dx}\\\\ \\int \\dfrac{du}{\\varphi(u)-u}&=\\int \\dfrac{dx}{x} + C=\\ln|x| + C\\\\ \\Phi(u)&=\\Phi(\\dfrac{y}{x}) = \\ln|x| + C\\\\ \\end{aligned} \\] \\(y'+p(x)y=q(x)\\) \\[ y = \\dfrac{\\displaystyle\\int e^{\\int p(x)dx} q(x)dx+C}{e^{\\int p(x)dx}} \\] \\(y'+p(x)y=q(x)y^n\\) \\[ \\begin{aligned} &y'y^{-n}+p(x)y^{1-n} = q(x)\\\\ \\text{let}\\ &z = y^{1-n},\\dfrac{dz}{dx}=(1-n)\\dfrac{dy}{dx}y^{-n}\\\\ &\\dfrac{1}{1-n}\\dfrac{dz}{dx}+p(x)z=q(x) \\end{aligned} \\]","title":"Differential Equation"}]}