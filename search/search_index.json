{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"about/","title":"About","text":""},{"location":"ai/","title":"AI-Learning","text":""},{"location":"ai/#machine_learning","title":"Machine_Learning","text":""},{"location":"ai/#exp1-linear_regression","title":"exp1-Linear_Regression","text":""},{"location":"ai/#exp1-1","title":"exp1-1","text":""},{"location":"ai/#exp1-2","title":"exp1-2","text":""},{"location":"ai/#exp2-logistic_regression","title":"exp2-Logistic_Regression","text":""},{"location":"ai/#exp2-1","title":"exp2-1","text":""},{"location":"ai/#exp2-2","title":"exp2-2","text":""},{"location":"ai/#exp3-neural_networkfp","title":"exp3-Neural_Network(fp)","text":""},{"location":"ai/#exp3-1","title":"exp3-1","text":""},{"location":"ai/#exp3-2","title":"exp3-2","text":""},{"location":"ai/#exp4-neural_networkbp","title":"exp4-Neural_Network(bp)","text":""},{"location":"ai/#exp4-1","title":"exp4-1","text":""},{"location":"ai/#exp5-bias_vs_variance","title":"exp5-Bias_VS_Variance","text":""},{"location":"ai/#exp5-1","title":"exp5-1","text":""},{"location":"ai/#exp6-svm","title":"exp6-SVM","text":""},{"location":"ai/#exp6-1","title":"exp6-1","text":""},{"location":"ai/#exp6-2","title":"exp6-2","text":""},{"location":"ai/#exp6-3","title":"exp6-3","text":""},{"location":"ai/#exp6-4","title":"exp6-4","text":""},{"location":"ai/#exp7-k-means_and_pca","title":"exp7-K-means_And_PCA","text":""},{"location":"ai/#exp7-1","title":"exp7-1","text":""},{"location":"ai/#exp7-2","title":"exp7-2","text":""},{"location":"ai/#exp7-3","title":"exp7-3","text":""},{"location":"ai/#deep_learning","title":"Deep_Learning","text":""},{"location":"ai/#reference","title":"Reference","text":"<p>ladykaka007\u7684\u6295\u7a3f\u89c6\u9891</p>"},{"location":"algorithms/","title":"Algorithms","text":""},{"location":"algorithms/#graph-algorithms","title":"Graph Algorithms","text":""},{"location":"algorithms/#single-source-shortest-paths","title":"Single-Source Shortest Paths","text":""},{"location":"algorithms/#dijkstras-algorithm","title":"Dijkstra's Algorithm","text":"<p>We assume that \\(w(u, v) \\geq 0\\) for each edge \\((u, v)\\in E\\)</p> <pre><code>DIJKSTRA. (G,w,s)\n1 INITIALIZE-SINGLE-SOURCE(G,s)\n2 S=\u2205\n3 Q=G.V  // Q: min-priority queue\n4 while Q\u2260\u2205\n5   u=D EXTRACT-MIN(Q)\n6   S=S\u222a{u}\n7   for each vertex v\u2208G.Adj[u]\n8       RELAX(u,v,w)\n</code></pre> <pre><code>void dijkstra(vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; &amp;graph, int src) {\n    int n = graph.size();\n    vector&lt;int&gt; dist(n, INT_MAX);\n    // Sorted by distance, the vertices with smaller distance are ranked first.\n    priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;,\n                   greater&lt;pair&lt;int, int&gt;&gt;&gt;\n        pq; // Store the vertices to be processed and their distance from the\n            // source point\n\n    pq.push({0, src});\n    dist[src] = 0;\n\n    // O((V+E)logV)\n    while (!pq.empty()) {\n        int u = pq.top().second;\n        pq.pop();\n\n        for (auto it : graph[u]) {\n            int v = it.first;\n            int weight = it.second;\n\n            if (dist[v] &gt; dist[u] + weight) {\n                dist[v] = dist[u] + weight;\n                pq.push({dist[v], v});\n            }\n        }\n    }\n\n    for (int i = 0; i &lt; n; ++i) {\n        cout &lt;&lt; i &lt;&lt; \"\\t\" &lt;&lt; dist[i] &lt;&lt; endl;\n    }\n}\n</code></pre> <pre><code>// Test Code\n#include &lt;climits&gt; // for INT_MAX\n#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;utility&gt; // for pair\n#include &lt;vector&gt;\n\nusing namespace std;\n\nvoid dijkstra(vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; &amp;graph, int src);\n\nint main() {\n    // Adjacency table\n    vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; graph = {\n        {{1, 4}, {2, 3}}, {{2, 1}, {3, 2}}, {{3, 4}}, {}};\n    int src = 0;\n    dijkstra(graph, src);\n\n    return 0;\n}\n\nvoid dijkstra(vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; &amp;graph, int src) {\n    // ...\n}\n</code></pre>"},{"location":"algorithms/#reference","title":"Reference","text":"<p>[1] C. E. Leiserson, T. H. Cormen, R. L. Rivest, and C. Stein, \"Introduction to Algorithms, 3rd Edition,\" MIT Press, 2009.</p>"},{"location":"maths/","title":"Maths","text":""},{"location":"maths/#integration","title":"Integration","text":"\\[ \\lim_{n\\to\\infty}\\sum_{k=1}^n{\\dfrac{1}{n+k}} = \\lim_{n\\to\\infty}\\sum_{k=1}^n{\\dfrac{1}{1+\\frac{k}{n}}}=\\int_0^1{\\dfrac{1}{1+x}}dx=\\ln2. \\]"},{"location":"maths/#differential-equation","title":"Differential Equation","text":"<ul> <li>\\(\\dfrac{dy}{dx}=f(x)g(y)\\)</li> </ul> \\[ \\int{\\dfrac{dy}{g(y)}=\\int{f(x)dx}+C} \\] <ul> <li>\\(\\dfrac{dy}{dx}=f(x,y)\\)</li> </ul> \\[ \\begin{aligned} &amp;\\text{let}\\ y = ux\\\\ f(x,y) &amp;= f(x,ux)=\\varphi(u)\\\\ \\varphi(u) &amp;= u+x\\dfrac{du}{dx}\\\\ \\int \\dfrac{du}{\\varphi(u)-u}&amp;=\\int \\dfrac{dx}{x} + C=\\ln|x| + C\\\\ \\Phi(u)&amp;=\\Phi(\\dfrac{y}{x}) = \\ln|x| + C\\\\ \\end{aligned} \\] <ul> <li>\\(y'+p(x)y=q(x)\\)</li> </ul> \\[ y = \\dfrac{\\displaystyle\\int e^{\\int p(x)dx} q(x)dx+C}{e^{\\int p(x)dx}} \\] <ul> <li>\\(y'+p(x)y=q(x)y^n\\)</li> </ul> \\[ \\begin{aligned} &amp;y'y^{-n}+p(x)y^{1-n} = q(x)\\\\ \\text{let}\\ &amp;z = y^{1-n},\\dfrac{dz}{dx}=(1-n)\\dfrac{dy}{dx}y^{-n}\\\\ &amp;\\dfrac{1}{1-n}\\dfrac{dz}{dx}+p(x)z=q(x) \\end{aligned} \\]"},{"location":"python/","title":"Python","text":""},{"location":"python/#socket-programming","title":"Socket Programming","text":"<ul> <li><code>server</code></li> </ul> <pre><code>import socket\nimport threading\n\n\ndef serverSocket(host, port):\n    socket_server = socket.socket()\n    socket_server.bind((host, port))\n    socket_server.listen(5)\n    print(f\"Listening...\")\n    num = 0\n    while True:\n        num += 1\n        conn, addr = socket_server.accept()\n        print(f\"{num}: Received a message from client {addr}\")\n        client_handler = threading.Thread(\n            target=handleClient, args=(conn, addr, num))\n        client_handler.start()\n\n\ndef handleClient(conn, addr, num):\n    while True:\n        data_from_client: str = conn.recv(1024).decode(\"UTF-8\")\n        print(f\"{num}: The message from {addr} is {data_from_client}.\")\n        msg = input(f\"{num}: Enter the message replied to client {addr}: \")\n        if msg == 'exit':\n            break\n        conn.send(msg.encode(\"UTF-8\"))\n    conn.close()\n\n\nif __name__ == '__main__':\n    server_host = input(\"Please enter server IP: \")\n    server_port = int(input(\"Please enter server port: \"))\n    serverSocket(server_host, server_port)\n</code></pre> <ul> <li><code>client</code></li> </ul> <pre><code>import socket\n\n\ndef create_client(host, port):\n    socket_client = socket.socket()\n    socket_client.connect((host, port))\n    while True:\n        msg = input(f\"Enter the message sent to server ({host}:{port}): \")\n        if msg == \"exit\":\n            break\n        socket_client.send(msg.encode(\"UTF-8\"))\n        response = socket_client.recv(1024).decode(\"UTF-8\")\n        print(f\"The response from server ({host}:{port}) is {response}\")\n    socket_client.close()\n\n\nif __name__ == '__main__':\n    server_host = input(\"Please enter server IP: \")\n    server_port = int(input(\"Please enter server port: \"))\n    create_client(server_host, server_port)\n</code></pre>"},{"location":"verilog/","title":"Verilog","text":""},{"location":"verilog/#adder100i","title":"Adder100i","text":"<pre><code>module top_module(\n    input [99:0] a,\n    input [99:0] b,\n    input cin,\n\n    output [99:0] cout,\n    output [99:0] sum\n);\n    adder u_adder0(\n        .a(a[0]),\n        .b(b[0]),\n        .cin(cin),\n        .sum(sum[0]),\n        .cout(cout[0])\n    );\n    generate\n        genvar i;\n        for (i = 1; i &lt; 100; i = i + 1) begin: full_adder\n            adder u_adder(\n                .a(a[i]),\n                .b(b[i]),\n                .cin(cout[i-1]),\n                .sum(sum[i]),\n                .cout(cout[i])\n            );\n        end\n    endgenerate\n\nendmodule\n\nmodule adder (\n    input a,\n    input b,\n    input cin,\n\n    output cout,\n    output sum\n);\n    assign sum = a ^ b ^ cin;\n    assign cout = (a &amp; b) | (a &amp; cin) | (b &amp; cin);\n\nendmodule //adder\n</code></pre>"}]}