{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"about/","title":"About","text":""},{"location":"ai/","title":"AI-Learning","text":""},{"location":"ai/#machine_learning","title":"Machine_Learning","text":""},{"location":"ai/#exp1-linear_regression","title":"exp1-Linear_Regression","text":""},{"location":"ai/#exp1-1","title":"exp1-1","text":""},{"location":"ai/#exp1-2","title":"exp1-2","text":""},{"location":"ai/#exp2-logistic_regression","title":"exp2-Logistic_Regression","text":""},{"location":"ai/#exp2-1","title":"exp2-1","text":""},{"location":"ai/#exp2-2","title":"exp2-2","text":""},{"location":"ai/#exp3-neural_networkfp","title":"exp3-Neural_Network(fp)","text":""},{"location":"ai/#exp3-1","title":"exp3-1","text":""},{"location":"ai/#exp3-2","title":"exp3-2","text":""},{"location":"ai/#exp4-neural_networkbp","title":"exp4-Neural_Network(bp)","text":""},{"location":"ai/#exp4-1","title":"exp4-1","text":""},{"location":"ai/#exp5-bias_vs_variance","title":"exp5-Bias_VS_Variance","text":""},{"location":"ai/#exp5-1","title":"exp5-1","text":""},{"location":"ai/#exp6-svm","title":"exp6-SVM","text":""},{"location":"ai/#exp6-1","title":"exp6-1","text":""},{"location":"ai/#exp6-2","title":"exp6-2","text":""},{"location":"ai/#exp6-3","title":"exp6-3","text":""},{"location":"ai/#exp6-4","title":"exp6-4","text":""},{"location":"ai/#exp7-k-means_and_pca","title":"exp7-K-means_And_PCA","text":""},{"location":"ai/#exp7-1","title":"exp7-1","text":""},{"location":"ai/#exp7-2","title":"exp7-2","text":""},{"location":"ai/#exp7-3","title":"exp7-3","text":""},{"location":"ai/#deep_learning","title":"Deep_Learning","text":""},{"location":"ai/#reference","title":"Reference","text":"<p>ladykaka007\u7684\u6295\u7a3f\u89c6\u9891</p>"},{"location":"algorithms/","title":"Algorithms","text":""},{"location":"algorithms/#graph-algorithms","title":"Graph Algorithms","text":""},{"location":"algorithms/#single-source-shortest-paths","title":"Single-Source Shortest Paths","text":""},{"location":"algorithms/#dijkstras-algorithm","title":"Dijkstra's Algorithm","text":"<p>We assume that \\(w(u, v) \\geq 0\\) for each edge \\((u, v)\\in E\\)</p> <pre><code>DIJKSTRA. (G,w,s)\n1 INITIALIZE-SINGLE-SOURCE(G,s)\n2 S=\u2205\n3 Q=G.V  // Q: min-priority queue\n4 while Q\u2260\u2205\n5   u=D EXTRACT-MIN(Q)\n6   S=S\u222a{u}\n7   for each vertex v\u2208G.Adj[u]\n8       RELAX(u,v,w)\n</code></pre> <pre><code>void dijkstra(vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; &amp;graph, int src) {\n    int n = graph.size();\n    vector&lt;int&gt; dist(n, INT_MAX);\n    // Sorted by distance, the vertices with smaller distance are ranked first.\n    priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;,\n                   greater&lt;pair&lt;int, int&gt;&gt;&gt;\n        pq; // Store the vertices to be processed and their distance from the\n            // source point\n\n    pq.push({0, src});\n    dist[src] = 0;\n\n    // O((V+E)logV)\n    while (!pq.empty()) {\n        int u = pq.top().second;\n        pq.pop();\n\n        for (auto it : graph[u]) {\n            int v = it.first;\n            int weight = it.second;\n\n            if (dist[v] &gt; dist[u] + weight) {\n                dist[v] = dist[u] + weight;\n                pq.push({dist[v], v});\n            }\n        }\n    }\n\n    for (int i = 0; i &lt; n; ++i) {\n        cout &lt;&lt; i &lt;&lt; \"\\t\" &lt;&lt; dist[i] &lt;&lt; endl;\n    }\n}\n</code></pre> <pre><code>// Test Code\n#include &lt;climits&gt; // for INT_MAX\n#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;utility&gt; // for pair\n#include &lt;vector&gt;\n\nusing namespace std;\n\nvoid dijkstra(vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; &amp;graph, int src);\n\nint main() {\n    // Adjacency table\n    vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; graph = {\n        {{1, 4}, {2, 3}}, {{2, 1}, {3, 2}}, {{3, 4}}, {}};\n    int src = 0;\n    dijkstra(graph, src);\n\n    return 0;\n}\n\nvoid dijkstra(vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; &amp;graph, int src) {\n    // ...\n}\n</code></pre>"},{"location":"algorithms/#reference","title":"Reference","text":"<p>[1] C. E. Leiserson, T. H. Cormen, R. L. Rivest, and C. Stein, \"Introduction to Algorithms, 3rd Edition,\" MIT Press, 2009.</p>"},{"location":"config/","title":"Configuration","text":""},{"location":"config/#sourcelist","title":"source.list","text":"<pre><code># Ubuntu20.04\n$ sudo vim /etc/apt/sources.list\n\n# tuna.tsinghua\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse \n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse \ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse \n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse \ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse \n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse \ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse \n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse\n\n# aliyun\ndeb http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse \ndeb-src http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse \ndeb http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse \ndeb http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse \ndeb-src http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse \ndeb http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse \ndeb-src http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse \ndeb http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse \ndeb-src http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse\n\n# ustc\ndeb https://mirrors.ustc.edu.cn/ubuntu/ jammy main restricted universe multiverse \ndeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy main restricted universe multiverse \ndeb https://mirrors.ustc.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse \ndeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse \ndeb https://mirrors.ustc.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse \ndeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse \ndeb https://mirrors.ustc.edu.cn/ubuntu/ jammy-security main restricted universe multiverse \ndeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-security main restricted universe multiverse \ndeb https://mirrors.ustc.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse \ndeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse\n</code></pre>"},{"location":"config/#ssh","title":"SSH","text":"<pre><code>$ sudo apt update\n$ sudo apt install openssh-server -y\n$ sudo ps -e | grep ssh\n$ sudo service ssh start\n$ sudo systemctl enable --now ssh\n$ sudo vim /etc/ssh/sshd_config  # PermitRootLogin yes\n$ sudo service sshd start\n# \u5f00\u673a\u81ea\u542f\n$ sudo systemctl enable ssh\n$ reboot\n</code></pre>"},{"location":"config/#zshpowerlevel10k","title":"zsh&amp;Powerlevel10k","text":""},{"location":"config/#oh-my-zsh","title":"oh-my-zsh","text":"<pre><code>$ sudo apt-get install zsh\n$ sh -c \"$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)\"\n$ chsh -s /bin/zsh  # \u4fee\u6539\u9ed8\u8ba4\u7ec8\u7aef\u4e3azsh\n\n$ git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k  # \u5b89\u88c5Powerlevel10k\n$ vim ~/.zshrc # \u4fee\u6539ZSH_THEME=\"powerlevel10k/powerlevel10k\"\n</code></pre>"},{"location":"config/#plug-ins","title":"Plug-ins","text":"<pre><code># zsh-autosuggestions\n$ git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n# zsh-syntax-highlighting\n$ git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n$ vim ~/.zshrc\n# plugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n$ source ~/.zshrc\n</code></pre>"},{"location":"config/#conda","title":"Conda","text":""},{"location":"config/#installation","title":"Installation","text":"<pre><code>$ cd ~/Download\n$ wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2024.02-1-Linux-x86_64.sh\n$ bash Anaconda3-2024.02-1-Linux-x86_64.sh\n$ conda update -n base -c defaults conda  # \u66f4\u65b0\uff08\u7b2c\u4e00\u6b21\u5b89\u88c5\u4e0d\u9700\u8981\uff09\n$ source ~/.bashrc  # \u82e5\u4e3a.zshrc\u9700\u8981\u6dfb\u52a0 export PATH=/home/username/anaconda3/bin:$PATH\n$ conda config --set auto_activate_base false  # \u53d6\u6d88\u81ea\u52a8\u6fc0\u6d3b\n\n# Source\n$ vim.condarc\nchannels:\n  - defaults\nshow_channel_urls: true\nchannel_alias: https://mirrors.tuna.tsinghua.edu.cn/anaconda\ndefault_channels:\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2\ncustom_channels:\n  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\nauto_activate_base: true\n</code></pre>"},{"location":"config/#env","title":"env","text":"<pre><code>$ conda create -n python3 python=3.10  # \u521b\u5efa\u865a\u62df\u73af\u5883\n$ source activate python3  # \u6fc0\u6d3b\u865a\u62df\u73af\u5883\n$ conda remove -n python3 --all  # \u5220\u9664\u865a\u62df\u73af\u5883\n$ conda env list  # \u67e5\u770b\u865a\u62df\u73af\u5883\n</code></pre>"},{"location":"config/#git","title":"Git","text":"<pre><code>$ sudo git apt install git\n</code></pre>"},{"location":"config/#gitgithub","title":"Git&amp;GitHub","text":"<pre><code># user.name &amp; user.email\n$ git config --global user.name \"Euler0525\" \n$ git config --global user.email \"euler0525@139.com\"\n$ ssh-keygen -t rsa -C \"euler0525@139.com\"\n</code></pre> <ul> <li>\u5728GitHub\u4e2d\u6dfb\u52a0\u516c\u94a5</li> </ul> <p>\u5728\u7528\u6237\u540d\u76ee\u5f55\u4e0b\u7684<code>.ssh</code>\u76ee\u5f55\u4e0b<code>cat id_rsa.pub</code>\uff0c\u5c06\u5185\u5bb9\u590d\u5236\uff1b</p> <p>\u8fdb\u5165GitHub-setting-SSH and GPG keys-New SSH key\uff1b</p> <p>\u5c06\u521a\u521a\u590d\u5236\u7684\u5185\u5bb9\u7c98\u8d34\u5230key\u4e2d\uff0c\uff08Title\u4efb\u610f\uff09\uff1b</p> <p>\u6267\u884c<code>ssh -T</code><code>git@github.com</code>\uff0c\u8f93\u5165<code>yes</code>\uff0c\u663e\u793a\u5982\u4e0b\u6210\u529f\uff1b</p> <pre><code>Hi ...! You've successfully authenticated, but GitHub does not provide shell access.\n</code></pre>"},{"location":"config/#docker","title":"Docker","text":"<pre><code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\nsudo usermod -aG docker ${USER}  # \u5c06\u5f53\u524d\u7528\u6237\u52a0\u5165Docker\u7528\u6237\u7ec4\nsudo service docker start    # \u542f\u52a8docker\u670d\u52a1\n</code></pre>"},{"location":"config/#nginx","title":"Nginx","text":"<pre><code>$ sudo apt install nginx -y\n# \u542f\u52a8\n$ sudo systemctl start nginx\n$ sudo systemclt enable nginx\n$ sudo systemctl status nginx\n# \u5f00\u653e\u7aef\u53e3\n$ sudo ufw enable # \u6253\u5f00\u9632\u706b\u5899\n$ sudo ufw allow 80/tcp\n$ sudo ufw allow 443/tcp\n$ sudo ufw status\n</code></pre>"},{"location":"maths/","title":"Maths","text":""},{"location":"maths/#integration","title":"Integration","text":"\\[ \\lim_{n\\to\\infty}\\sum_{k=1}^n{\\dfrac{1}{n+k}} = \\lim_{n\\to\\infty}\\sum_{k=1}^n{\\dfrac{1}{1+\\frac{k}{n}}}=\\int_0^1{\\dfrac{1}{1+x}}dx=\\ln2. \\]"},{"location":"maths/#differential-equation","title":"Differential Equation","text":"<ul> <li>\\(\\dfrac{dy}{dx}=f(x)g(y)\\)</li> </ul> \\[ \\int{\\dfrac{dy}{g(y)}=\\int{f(x)dx}+C} \\] <ul> <li>\\(\\dfrac{dy}{dx}=f(x,y)\\)</li> </ul> \\[ \\begin{aligned} &amp;\\text{let}\\ y = ux\\\\ f(x,y) &amp;= f(x,ux)=\\varphi(u)\\\\ \\varphi(u) &amp;= u+x\\dfrac{du}{dx}\\\\ \\int \\dfrac{du}{\\varphi(u)-u}&amp;=\\int \\dfrac{dx}{x} + C=\\ln|x| + C\\\\ \\Phi(u)&amp;=\\Phi(\\dfrac{y}{x}) = \\ln|x| + C\\\\ \\end{aligned} \\] <ul> <li>\\(y'+p(x)y=q(x)\\)</li> </ul> \\[ y = \\dfrac{\\displaystyle\\int e^{\\int p(x)dx} q(x)dx+C}{e^{\\int p(x)dx}} \\] <ul> <li>\\(y'+p(x)y=q(x)y^n\\)</li> </ul> \\[ \\begin{aligned} &amp;y'y^{-n}+p(x)y^{1-n} = q(x)\\\\ \\text{let}\\ &amp;z = y^{1-n},\\dfrac{dz}{dx}=(1-n)\\dfrac{dy}{dx}y^{-n}\\\\ &amp;\\dfrac{1}{1-n}\\dfrac{dz}{dx}+p(x)z=q(x) \\end{aligned} \\]"},{"location":"maths/#extended-euclidean-algorithm","title":"Extended Euclidean Algorithm","text":"\\(q\\) \\(a\\) \\(b\\) \\(s_0\\) \\(s_1\\) \\(t_0\\) \\(t_1\\) \\(-\\) \\(25\\) \\(21\\) \\(1\\) \\(0\\) \\(0\\) \\(1\\) \\(1\\) \\(21\\) \\(4\\) \\(0\\) \\(1\\) \\(1\\) \\(-1\\) \\(5\\) \\(4\\) \\(1\\) \\(1\\) \\(-5\\) \\(-1\\) \\(6\\) \\(4\\) \\(1\\) \\(0\\) \\(-5\\) \\(21\\) \\(6\\) \\(-25\\) \\[ (-5) * 25 + 6 * 21 = 1 \\]"},{"location":"programming/asm/","title":"Assembly Language","text":""},{"location":"programming/asm/#jgjngjljnl","title":"<code>JG/JNG/JL/JNL</code>","text":"asm function condition <code>JG/JNLE LABLE</code> \\(a &gt; b\\) <code>ZF=0 &amp;&amp; SF=OF</code> <code>JNG/JLE LABEL</code> \\(a \\leq b\\) <code>ZF=1 || SF\u2260OF</code> <code>JL/JNGE LABEL</code> \\(a &lt; b\\) <code>SF\u2260OF</code> <code>JNL/JGE LABEL</code> \\(a\\geq b\\) <code>SF=OF</code>"},{"location":"programming/c/","title":"C","text":""},{"location":"programming/c/#coding-error","title":"Coding Error","text":"<pre><code># include &lt;stdio.h&gt;\n\nint main()\n{\n    char* arr1 = \"\\xef\\xbf\\xbd\\xef\\xbf\\xbd\";\n    printf(\"%s\\n\", arr1);\n\n    char arr2[1];\n    printf(\"%s\\n\", arr2);\n\n    char* arr3;\n    arr3 = (char*)malloc(6);\n    printf(\"%s\\n\", arr3);\n\n    char* arr4 = \"\\xef\\xbb\\xef\\xbb\\xef\\xbb\";\n    printf(\"%s\\n\", arr4);\n\n    return 0;\n}\n</code></pre>"},{"location":"programming/c/#isc_lab","title":"ISC_Lab","text":"<ul> <li>ISC_Lab1</li> </ul> <pre><code>/**\n * ISC_Lab1: \u5927\u6574\u6570\u8fd0\u7b97\n * \u53ea\u4f7f\u7528\u5206\u652f\u3001\u5faa\u73af\u3001\u5c40\u90e8\u53d8\u91cf (\u4f7f\u7528\u6574\u6570\u7684\u4f4d\u5bbd\u81f3\u591a\u4e3a64\n * bit)\u3001\u8d4b\u503c\u8bed\u53e5\u3001\u4f4d\u8fd0\u7b97\u548c\u52a0\u51cf\u6cd5\u5b9e\u73b0 $a \\times b \\mod m$\n */\n\n#include &lt;stdint.h&gt;\n\nuint64_t multimod(uint64_t a, uint64_t b, uint64_t m) {\n    while (a &gt; m) {\n        a -= m;\n    }\n    while (b &gt; m) {\n        b -= m;\n    }\n    uint64_t result = 0;\n    uint64_t su = UINT64_MAX - m + 1;\n\n    for (uint64_t i = 64; i != 0; --i) {\n        // \u79fb\u4f4d\u65f6\u6ea2\u51fa\n        if (result &gt;&gt; 63) {\n            result = result &lt;&lt; 1;\n            result += su;\n        } else {\n            result = result &lt;&lt; 1;\n        }\n        result = (result &gt; m) ? (result - m) : result;\n\n        if ((a &gt;&gt; (i - 1)) &amp; 1) {\n            // \u52a0\u6cd5\u6ea2\u51fa(\u8003\u8651b\u59cb\u7ec8\u4e0d\u53d8, \u77ed\u8def\u51cf\u5c11\u91cd\u590d\u5224\u65ad)\n            if ((result &gt;&gt; 63 &amp; b &gt;&gt; 63) |\n                ((result &gt;&gt; 63 | b &gt;&gt; 63) &amp; (result &gt;&gt; 62 &amp; b &gt;&gt; 62))) {\n                result = result + b;\n                result += su;\n            } else {\n                result = result + b;\n            }\n        }\n        result = (result &gt; m) ? (result - m) : result;\n    }\n    result = (result &gt; m) ? (result - m) : result;\n\n    return result;\n}\n</code></pre>"},{"location":"programming/c/#structure-member-alignment","title":"Structure Member Alignment","text":"<pre><code>#include &lt;stddef.h&gt;\n#include &lt;stdio.h&gt;\n\n// 1. Unrestrained\n// 2. #pragma pack(1)\n// 3. #pragma pack(2)\n\nstruct test {\n    char x2;\n    int x1;\n    short x3;\n    long long x4;\n} __attribute__((packed));\n\nstruct test1 {\n    char x2;\n    int x1;\n    short x3;\n    long long x4;\n};\n\nstruct test2 {\n    char x2;\n    int x1;\n    short x3;\n    long long x4;\n} __attribute__((aligned(8)));\n\nint main() {\n    struct test t;\n    printf(\"%zu, addr_x2=%p\\n\", offsetof(struct test, x2), &amp;t.x2);\n    printf(\"%zu, addr_x1=%p\\n\", offsetof(struct test, x1), &amp;t.x1);\n    printf(\"%zu, addr_x3=%p\\n\", offsetof(struct test, x3), &amp;t.x3);\n    printf(\"%zu, addr_x4=%p\\n\", offsetof(struct test, x4), &amp;t.x4);\n    printf(\"%zu\\n\", sizeof(struct test));\n\n    printf(\"******\\n\");\n\n    struct test1 t1;\n    printf(\"%zu, addr_x2=%p\\n\", offsetof(struct test1, x2), &amp;t1.x2);\n    printf(\"%zu, addr_x1=%p\\n\", offsetof(struct test1, x1), &amp;t1.x1);\n    printf(\"%zu, addr_x3=%p\\n\", offsetof(struct test1, x3), &amp;t1.x3);\n    printf(\"%zu, addr_x4=%p\\n\", offsetof(struct test1, x4), &amp;t1.x4);\n    printf(\"%zu\\n\", sizeof(struct test1));\n\n    printf(\"******\\n\");\n\n    struct test2 t2;\n    printf(\"%zu, addr_x2=%p\\n\", offsetof(struct test2, x2), &amp;t2.x2);\n    printf(\"%zu, addr_x1=%p\\n\", offsetof(struct test2, x1), &amp;t2.x1);\n    printf(\"%zu, addr_x3=%p\\n\", offsetof(struct test2, x3), &amp;t2.x3);\n    printf(\"%zu, addr_x4=%p\\n\", offsetof(struct test2, x4), &amp;t2.x4);\n    printf(\"%zu\\n\", sizeof(struct test2));\n\n    return 0;\n}\n</code></pre>"},{"location":"programming/latex/","title":"\\(\\LaTeX\\)","text":""},{"location":"programming/latex/#optimization","title":"Optimization","text":"\\[ \\begin{equation} \\begin{aligned} \\label{P} &amp;\\max_{\\mathbf{\\omega}, q} {\\log_2{(1+\\dfrac{|(h_{IU}QH_{AI}+h_{AU})\\mathbf{\\omega}|^2}{\\sigma_{U}^2})} - \\log_2{(1+\\dfrac{|(h_{IE}QH_{AI}+h_{AE})\\mathbf{\\omega}|^2}{\\sigma_{E}^2})}}\\\\ &amp;\\begin{array}{r@{\\quad}r@{}l@{\\quad}l} \\text{s.t.} &amp;||\\mathbf{\\omega}||^2\\leq P_{AP}\\\\     &amp;|q_n|=1, \\forall n\\\\ \\end{array} \\end{aligned} \\end{equation} \\] <pre><code>\\begin{equation}\n\\begin{aligned} \\label{P}\n&amp;\\max_{\\mathbf{\\omega}, q} {\\log_2{(1+\\dfrac{|(h_{IU}QH_{AI}+h_{AU})\\mathbf{\\omega}|^2}{\\sigma_{U}^2})} - \\log_2{(1+\\dfrac{|(h_{IE}QH_{AI}+h_{AE})\\mathbf{\\omega}|^2}{\\sigma_{E}^2})}}\\\\\n&amp;\\begin{array}{r@{\\quad}r@{}l@{\\quad}l}\n\\text{s.t.} &amp;||\\mathbf{\\omega}||^2\\leq P_{AP}\\\\\n    &amp;|q_n|=1, \\forall n\\\\\n\\end{array}\n\\end{aligned}\n\\end{equation}\n</code></pre>"},{"location":"programming/python/","title":"Python","text":""},{"location":"programming/python/#socket-programming","title":"Socket Programming","text":"<ul> <li><code>server</code></li> </ul> <pre><code>import socket\nimport threading\n\n\ndef serverSocket(host, port):\n    socket_server = socket.socket()\n    socket_server.bind((host, port))\n    socket_server.listen(5)\n    print(f\"Listening...\")\n    num = 0\n    while True:\n        num += 1\n        conn, addr = socket_server.accept()\n        print(f\"{num}: Received a message from client {addr}\")\n        client_handler = threading.Thread(\n            target=handleClient, args=(conn, addr, num))\n        client_handler.start()\n\n\ndef handleClient(conn, addr, num):\n    while True:\n        data_from_client: str = conn.recv(1024).decode(\"UTF-8\")\n        print(f\"{num}: The message from {addr} is {data_from_client}.\")\n        msg = input(f\"{num}: Enter the message replied to client {addr}: \")\n        if msg == 'exit':\n            break\n        conn.send(msg.encode(\"UTF-8\"))\n    conn.close()\n\n\nif __name__ == '__main__':\n    server_host = input(\"Please enter server IP: \")\n    server_port = int(input(\"Please enter server port: \"))\n    serverSocket(server_host, server_port)\n</code></pre> <ul> <li><code>client</code></li> </ul> <pre><code>import socket\n\n\ndef create_client(host, port):\n    socket_client = socket.socket()\n    socket_client.connect((host, port))\n    while True:\n        msg = input(f\"Enter the message sent to server ({host}:{port}): \")\n        if msg == \"exit\":\n            break\n        socket_client.send(msg.encode(\"UTF-8\"))\n        response = socket_client.recv(1024).decode(\"UTF-8\")\n        print(f\"The response from server ({host}:{port}) is {response}\")\n    socket_client.close()\n\n\nif __name__ == '__main__':\n    server_host = input(\"Please enter server IP: \")\n    server_port = int(input(\"Please enter server port: \"))\n    create_client(server_host, server_port)\n</code></pre>"},{"location":"programming/python/#list","title":"List","text":"<p>Only the outermost for-expression is evaluated immediately, the other expressions are deferred until the generator is run.  \u2014\u2014PEP 289</p> <pre><code>old_list = [1, 2, 3]\nnew_list = (i for i in old_list if i in old_list)\nold_list = [0, 1, 2]\nprint(list(new_list))\n\n# old_list1 = [1, 2, 3]\n# old_list2 = [0, 1, 2]\n# new_list = (i for i in old_list1 if i in old_list2)\n# print(list(new_list))\n\n# old_list = [1, 2, 3]\n#\n# def __gen(a):\n#     for i in a:\n#         if i in old_list:\n#             yield i\n#\n# g = __gen(iter(old_list))\n# old_list = [0, 1, 2]\n# print(list(g))\n</code></pre>"},{"location":"programming/python/#not-bug","title":"Not Bug","text":"<ul> <li>Normal Use</li> </ul> <pre><code>config = {\"KEY\": \"admin\"}\n\nclass User(object):\n    def __init__(self, name):\n        self.name = name\n\n\nif __name__ == \"__main__\":\n    user = User(\"Euler0525\")\n    s = \"Hello {}!\".format(user.name)\n    print(s)\n\n# Hello Euler0525!\n</code></pre> <ul> <li>Malicious Use</li> </ul> <pre><code>config = {\"KEY\": \"admin\"}\n\nclass User(object):\n    def __init__(self, name):\n        self.name = name\n\n\nif __name__ == \"__main__\":\n    user = User(\"Euler0525\")\n    s = \"Hello {}!\".format(user.__class__.__init__.__globals__)\n    print(s)\n\n# Hello {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fdd2d6a10f0&gt;, '__spec__': None, '__annotations__': {}, '__builtins__': &lt;module 'builtins' (built-in)&gt;, '__file__': '/root/tmp/main.py', '__cached__': None, 'config': {'KEY': 'admin'}, 'User': &lt;class '__main__.User'&gt;, 'user': &lt;__main__.User object at 0x7fdd2d6db5b0&gt;}!\n</code></pre>"},{"location":"programming/python/#serialization-and-deserialization","title":"Serialization And Deserialization","text":"<ul> <li>Normal Use</li> </ul> <pre><code>import pickle\n\ndata = [\"aa\", \"bb\", \"cc\"]\np = pickle.dumps(data)\nprint(p)\n# b'\\x80\\x04\\x95\\x14\\x00\\x00\\x00\\x00\\x00\\x00\\x00]\\x94(\\x8c\\x02aa\\x94\\x8c\\x02bb\\x94\\x8c\\x02cc\\x94e.'\n\nd = pickle.loads(p)\nprint(d)\n# ['aa', 'bb', 'cc']\n</code></pre> <ul> <li>Malicious Use</li> </ul> <p>The <code>__reduce__</code> method in the Python class (the return value is a tuple) is automatically called when deserialization occurs.</p> <pre><code>class A(object):\n    def __reduce__(self):\n        return (os.system,(\"whoami\",))\n\na = A()\np = pickle.dumps(a)\npickle.loads(p)\n# root\n</code></pre>"},{"location":"programming/verilog/","title":"Verilog","text":""},{"location":"programming/verilog/#adder100i","title":"Adder100i","text":"<pre><code>module top_module(\n    input [99:0] a,\n    input [99:0] b,\n    input cin,\n\n    output [99:0] cout,\n    output [99:0] sum\n);\n    adder u_adder0(\n        .a(a[0]),\n        .b(b[0]),\n        .cin(cin),\n        .sum(sum[0]),\n        .cout(cout[0])\n    );\n    generate\n        genvar i;\n        for (i = 1; i &lt; 100; i = i + 1) begin: full_adder\n            adder u_adder(\n                .a(a[i]),\n                .b(b[i]),\n                .cin(cout[i-1]),\n                .sum(sum[i]),\n                .cout(cout[i])\n            );\n        end\n    endgenerate\n\nendmodule\n\nmodule adder (\n    input a,\n    input b,\n    input cin,\n\n    output cout,\n    output sum\n);\n    assign sum = a ^ b ^ cin;\n    assign cout = (a &amp; b) | (a &amp; cin) | (b &amp; cin);\n\nendmodule //adder\n</code></pre>"}]}